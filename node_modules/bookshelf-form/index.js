/* Shiga license */

//var inherits = require('inherits');

function BookShelfForm ( modelIn ) {
    if( modelIn ) {
        this.model = modelIn;
        this.obj = require('../../models/' + this.model);

/*        console.log( 'item.__proto__ - ' );
        console.dir( this.obj.__proto__ );

        console.log( 'this.obj.__proto__.__proto__ - ' );
        console.dir( this.obj.__proto__.__proto__ );
        console.log( 'this.obj.__proto__.__proto__.__proto__ - ' );
        console.dir( this.obj.__proto__.__proto__.__proto__ );
        console.log( 'this.obj.__proto__.__proto__.__proto__.__proto__ - ' );
        console.dir( this.obj.__proto__.__proto__.__proto__.__proto__ );*/
    }
}


BookShelfForm.prototype.model;
BookShelfForm.prototype.obj;
BookShelfForm.prototype.errors;

BookShelfForm.prototype.getForm = function( modelClass, modelObj ){
    this.init( modelClass );
    this.setFromArray( modelObj );

    var form = '';
    if( this.obj && this.obj.rules )
    {
        var saveFields = this.obj.rules["save"];
        var requiredFields = this.obj.rules["required"];
        var attributesFields = this.obj.attributes;
        var placeholderFields = this.obj.placeholder;
        var typeFields = this.obj.types;

        var required;
        var field;
        var placeholder;
        var name;
        var n;

        for (var i = 0; i < saveFields.length; i++) {
            field = saveFields[i];
            if (requiredFields && requiredFields.indexOf(field) > -1)required = true;
            else required = false;

            if (attributesFields && attributesFields[field])name = attributesFields[field]
            else name = field;

            if (placeholderFields && placeholderFields[field])placeholder = placeholderFields[field];
            else placeholder = '';

            form += "<div class=\"item form-group\">" +
                "<label class=\"control-label col-md-3 col-sm-3 col-xs-12\" for=\"field_" + saveFields[i] + "\">" + name + " " + ( required == true ? "<span class=\"required\">*</span>" : "" ) + "</label>" +
                "<div class=\"col-md-6 col-sm-6 col-xs-12\">" +
                this.getInput(field, this.obj.fields[field] ,typeFields, "field_" + saveFields[i], saveFields[i], placeholder, required) +
                "</div>" +
                "</div>";
        }

        if( this.obj.fields["id"] && this.obj.fields["id"] > 0 )form+='<input type="hidden" name="id" value="'+this.obj.fields["id"]+'" />'
        return form;
    }
}

BookShelfForm.prototype.getInput = function ( field, value, typeFields, id, name, placeholder, required ){
    var input;
    var type;
    var inputValue;

    type =  ( typeFields && typeFields[field] ) ? typeFields[field] : type = 'varchar';
    inputValue = value !== undefined ? value : inputValue = '';

    if( type == "vtext" )
        input = "<textarea id=\"" + id + "\" class=\"form-control col-md-7 col-xs-12\" name=\"" + name + "\" placeholder=\"" + placeholder + "\" " + ( required == true ? " required=\"required\" " : "" ) + " >"+inputValue+"</textarea>";

    if( type == "image" )
        input = "<input id=\"" + id + "\" name=\"" + name + "\" " + ( required == true ? " required=\"required\" " : "" ) + " type=\"file\"/>";

    if( type == "checkbox" )
        input = "<input id=\"" + id + "\" class=\"flat\" value=\"1\" name=\"" + name + "\" " + ( required == true ? " required=\"required\" " : "" ) + " type=\""+type+"\" "+( inputValue == 1 ? "checked" : "" )+" />";

    if( type == "url" || type == "email" )
        input = "<input id=\"" + id + "\" class=\"form-control col-md-7 col-xs-12\" name=\"" + name + "\" placeholder=\"" + placeholder + "\" " + ( required == true ? " required=\"required\" " : "" ) + " type=\""+type+"\" value=\""+inputValue+"\"/>";

    if( !type || !input || type == 'varchar' )
        input = "<input id=\"" + id + "\" class=\"form-control col-md-7 col-xs-12\" name=\"" + name + "\" placeholder=\"" + placeholder + "\" " + ( required == true ? " required=\"required\" " : "" ) + " type=\"text\" value=\""+inputValue+"\"/>";

    return input;
}

BookShelfForm.prototype.saveForm = function ( modelIn, values, id ){
    this.init( modelIn );
    this.setFromArray( values );
    var objId;
    var obj = this.obj;
    if( id !== undefined && id>0 )objId = id;
    if( values["id"] )objId = values["id"];

    var typeFields = this.obj.types;
    var field;

    if( this.validate() ){
        if (objId > 0) {
            new obj({id: objId})
                .fetch()
                .then(function (item) {

                    console.log( item );
                    // Проверяем все поля CHECKBOX если в форме значения не высталвенн то выставляем 0
                    for( typefield in typeFields ){
                        if( typeFields[typefield] == 'checkbox' && obj.fields[typefield] === undefined ){
                            console.log( typefield + ': '+typeFields[typefield] );
                            obj.fields[typefield] = 0;
                        }
                    }

                    item.save( obj.fields )
                        .then( function( model ){
                            console.log("1");
                            return true;
                        })
                        .catch( function( error ) {
                            console.log("2");
                            this.errors = error;
                            return false;
                        })
                })
                .catch(function (error) {
                    console.log("4");
                    this.errors = error;
                    return false;
                });
        }
            else return true;
    }
        else {
        return false;
    }
}

BookShelfForm.prototype.validate = function (){

    var saveFields = this.obj.rules["save"];
    var requireFields = this.obj.rules["required"];

    for( var i=0;i<saveFields.length;i++ ){
        field = saveFields[i];
        if( requireFields && requireFields[field] && !this.obj.fields[field] )this.errors+='<li>Не заполнено обязательное поле "'+attributesFields[field]+'"</li>';
    }

    if( this.errors )return false;
            else return true;
}

BookShelfForm.prototype.setFromArray = function ( values ){

    if( this.obj.fields === undefined )this.obj.fields = {};

    for( var field in values ){
        this.obj.fields[field] = values[field];
    }
}

module.exports = BookShelfForm;